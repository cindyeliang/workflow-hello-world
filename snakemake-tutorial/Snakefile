# test snakefile for snakemake tutotial

# define config file used to specify inputs
configfile: "config.yaml"

# define All rule at the top for snakemake to default to if not given a target
rule all:
    input:
        "plots/quals.svg"

# input function for obtaining input for mapping
def get_bwa_map_input_fastqs(wildcards):
    return config["samples"][wildcards.sample]

# first rule
# sample and input wildcards are used
# all output files must contain exactly the same wildcards
rule bwa_map:
    input:
        "data/genome.fa",
        # get_bwa_map_input_fastqs
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        # mark files as temp for deletion when job is done
        temp("mapped_reads/{sample}.bam")
    params:
        # annotate aligned read with read groups containing sample name
        rg=r"@RG\tID:{sample}\tSM:{sample}"
    log:
        # print rule-specific logfile
        "logs/bwa_mem/{sample}.log"
    benchmark:
        "benchmarks/{sample}.bwa.benchmark.txt"
    threads: 8
    shell:
        "(bwa mem -R '{params.rg}' -t {threads} {input} | "
        "samtools view -Sb - > {output}) 2> {log}"

# second rule: sort aligned files
rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        # prevent sorted bam from being deleted or modified
        protected("sorted_reads/{sample}.bam")
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam {input} > {output}"

# third rule: index sorted aligned reads
rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    shell:
        "samtools index {input}"

# Fourth rule: perform variant calling
# still needs wildcards defined by config file to work
rule bcftools_call:
    input:
        fa="data/genome.fa",
        bam=expand("sorted_reads/{sample}.bam", sample=config["samples"]),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=config["samples"])
    output:
        "calls/all.vcf"
    params:
        # obtain mutation rate param from config
        config["prior_mut_rate"]
    log:
        # print rule-specific logfile
        expand("logs/bcftools_call/{sample}.log", sample=config["samples"])
    shell:
        "(bcftools mpileup -f {input.fa} {input.bam} | "
        "bcftools call -mv -P '{params}' > {output}) 2> {log}"

# fifth rule: run custom script to create plots
rule plot_quals:
    input:
        "calls/all.vcf"
    output:
        "plots/quals.svg"
    script:
        "scripts/plot-quals.py"
